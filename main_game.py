import datetime
import random
import time

import telebot
from telebot import types
from telebot.types import Message, InlineKeyboardButton as IB, CallbackQuery

from config import TOKEN
from database import *

bot = telebot.TeleBot(TOKEN)
clear = types.ReplyKeyboardRemove()

temp = {}

powers = {
    '–û–≥–æ–Ω—å': (120, 15),
    '–í–æ–∑–¥—É—Ö': (100, 25),
    "–ó–µ–º–ª—è": (100, 20),
    "–ú–µ—Ç–∞–ª–ª": (110, 20),
    "–î–µ—Ä–µ–≤–æ": (130, 14),
    "–í–æ–¥–∞": (110, 25)
}


# class Enemy:
#     enemies = {
#         '–í—É—Ä–¥–∞–ª–∞–∫': (80, 20),
#         '–ü—Ä–∏–∑—Ä–∞–∫': (85, 15),
#
#     }


@bot.message_handler(["start"])
def start(m: Message):
    if is_new_player(m):
        temp[m.chat.id] = {}
        reg_1(m)
    else:
        menu(m)


@bot.message_handler(["menu"])
def menu(m: Message):
    try:
        print(temp[m.chat.id])
    except KeyError:
        temp[m.chat.id] = {}
    txt = "–ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?\n/square - –∏–¥—ë–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é –ø–ª–æ—â–∞–¥—å\n/home - –ø—É—Ç—å –¥–æ–º–æ–π\n/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    bot.send_message(m.chat.id, txt, reply_markup=clear)


@bot.message_handler(["square"])
def square(msg: Message):
    kb = types.ReplyKeyboardMarkup(True, True)
    kb.row("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–ª—ã")
    bot.send_message(msg.chat.id, "–¢—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ", reply_markup=kb)
    bot.register_next_step_handler(msg, reg_4)


@bot.message_handler(["home"])
def home(msg: Message):
    kb = types.ReplyKeyboardMarkup(True, True)
    kb.row("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –•–ü", "–ü–µ—Ä–µ–¥–æ—Ö–Ω—É—Ç—å")
    bot.send_message(msg.chat.id, "–¢—ã –¥–æ–º–∞", reply_markup=kb)
    bot.register_next_step_handler(msg, reg_5)


@bot.message_handler(["stats"])
def stats(msg: Message):
    player = db.read_obj("user_id", msg.chat.id)
    t = f"{player.power} {player.nick}:\n" \
        f"–ó–¥–æ—Ä–æ–≤—å–µ: {player.hp}‚ù§Ô∏è\n" \
        f"–£—Ä–æ–Ω: {player.dmg}‚öîÔ∏è\n" \
        f"LVL: {player.lvl}.{player.exp}‚öúÔ∏è\n\n" \
        f"–ï–¥–∞:\n"
    _, food = heals.read("user_id", msg.chat.id)

    for f in food:
        t += f"{f} ‚ù§Ô∏è{food[f][1]} ‚Äî {food[f][0]}—à—Ç.\n"
    bot.send_message(msg.chat.id, t)
    time.sleep(3)
    menu(msg)


@bot.callback_query_handler(func=lambda call: True)
def callback(call: CallbackQuery):
    print(call.data)
    if call.data.startswith("food_"):
        a = call.data.split("_")
        eating(call.message, a[1], a[2])
        # –ü—Ä–∏–¥—ë—Ç—Å—è –µ—â—ë —Ä–∞–∑ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = telebot.types.InlineKeyboardMarkup()
        _, food = heals.read("user_id", call.message.chat.id)
        if food == {}:
            bot.send_message(call.message.chat.id, '–ö—É—à–∞—Ç—å –Ω–µ—á–µ–≥–æ', reply_markup=clear)
            menu(call.message)
            return
        for key in food:
            kb.row(IB(f"{key} {food[key][1]} hp. - {food[key][0]} —à—Ç.", callback_data=f"food_{key}_{food[key][1]}"))
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=kb)
    if call.data.startswith("sleep_"):
        a = call.data.split("_")
        t = int(a[1]) // 2
        bot.send_message(call.message.chat.id, f"–¢—ã –ª–µ–≥ –æ—Ç–¥—ã—Ö–∞—Ç—å –Ω–∞ {t} –º–∏–Ω—É—Ç")
        time.sleep(t * 60)
        sleeping(call.message, a[1])
        bot.delete_message(call.message.chat.id, call.message.message_id)
        menu(call.message)
    if call.data == '0':
        menu(call.message)
    if call.data == "menu":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        menu(call.message)
    if call.data == "workout":
        player = db.read("user_id", call.message.chat.id)
        player[4] += player[5] / 10
        player[4] = round(player[4], 4)
        db.write(player)
        bot.answer_callback_query(call.id, "–¢—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è –∏ —Ç–≤–æ—è —Å–∏–ª–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è! \n"
                                           f"–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞–Ω–æ—Å–∏—à—å {player[4]}‚öîÔ∏è", True)


@bot.message_handler(["add_heal"])
def add_heal(msg: Message):
    _, food = heals.read("user_id", msg.chat.id)
    print(food)

    food["–ü–µ–ª—å–º–µ–Ω–∏"] = [15, 15]

    heals.write([msg.chat.id, food])
    bot.send_message(msg.chat.id, "–í—ã–¥–∞–ª–∏ –µ–¥—É —Ç–≤–æ–µ–º—É –≥–µ—Ä–æ—é")


def eat(msg: Message):
    kb = types.InlineKeyboardMarkup()
    _, food = heals.read("user_id", msg.chat.id)
    if food == {}:
        bot.send_message(msg.chat.id, '–ö—É—à–∞—Ç—å –Ω–µ—á–µ–≥–æ', reply_markup=clear)
        menu(msg)
        return
    for key in food:
        if food[key][0] > 0:
            kb.row(IB(f"{key} {food[key][1]} hp. - {food[key][0]} —à—Ç.", callback_data=f"food_{key}_{food[key][1]}"))
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ –±—É–¥–µ—à—å –µ—Å—Ç—å:", reply_markup=kb)


def eating(msg, ft, hp):
    _, food = heals.read("user_id", msg.chat.id)
    player = db.read("user_id", msg.chat.id)
    # –û—Ç–Ω–∏–º–∞–µ–º —Ö–ª–µ–±
    if food[ft][0] == 1:
        del food[ft]
    else:
        food[ft][0] -= 1

    heals.write([msg.chat.id, food])

    # –î–æ–±–∞–≤–ª—è–µ–º –•–ü
    player[3] += int(hp)
    db.write(player)
    print("–ò–≥—Ä–æ–∫ –ø–æ–µ–ª.")


def sleep(msg: Message):
    player = db.read("user_id", msg.chat.id)
    low = int(powers[player[2]][0] * player[5]) // 2 - player[3]
    high = int(powers[player[2]][0] * player[5]) - player[3]
    kb = telebot.types.InlineKeyboardMarkup()
    if low > 0:
        kb.row(IB(f"–í–∑–¥—Ä–µ–º–Ω—É—Ç—å ‚Äî +{low}‚ù§Ô∏è", callback_data=f"sleep_{low}"))
    if high > 0:
        kb.row(IB(f"–ü–æ—Å–ø–∞—Ç—å ‚Äî +{high}‚ù§Ô∏è", callback_data=f"sleep_{high}"))
    if len(kb.keyboard) == 0:
        kb.row(IB('–°–ø–∞—Ç—å –Ω–µ —Ö–æ—á–µ—Ç—Å—è', callback_data='0'))
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏, —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—à—å –æ—Ç–¥—ã—Ö–∞—Ç—å:", reply_markup=kb)


def sleeping(msg: Message, hp):
    player = db.read("user_id", msg.chat.id)
    player[3] += int(hp)
    db.write(player)
    print("–ò–≥—Ä–æ–∫ –ø–æ—Å–ø–∞–ª.")


def workout(msg: Message):
    kb = types.InlineKeyboardMarkup()
    kb.row(IB("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="workout"))
    kb.row(IB("–ù–∞–∑–∞–¥", callback_data="menu"))
    bot.send_message(msg.chat.id, "–ñ–º–∏, —á—Ç–æ–±—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!", reply_markup=kb)


def exam(msg: Message):
    player = db.read_obj("user_id", msg.chat.id)
    bot.send_message(msg.chat.id, f"–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ –∏—Å–ø—ã—Ç–∞–Ω–∏—é, {player.nick}!", reply_markup=clear)
    time.sleep(2)
    start_exam(msg)


def start_exam(msg: Message):
    # random.choice((block, attack))(msg)
    block(msg)


def block(msg: Message):
    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ—Ä–æ–Ω –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –µ–≥–æ
    sides = ["–°–ª–µ–≤–∞", "–°–ø—Ä–∞–≤–∞", "–°–≤–µ—Ä—Ö—É", "–°–Ω–∏–∑—É"]
    random.shuffle(sides)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = types.ReplyKeyboardMarkup(True, False)
    kb.row(sides[0], sides[3])
    kb.row(sides[1], sides[2])

    # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–æ—Ä–æ–Ω—É —É–¥–∞—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    right = random.choice(sides)
    bot.send_message(msg.chat.id, f"–ó–∞—â–∏—â–∞–π—Å—è! –£–¥–∞—Ä {right}!", reply_markup=kb)
    temp[msg.chat.id]["block_start"] = datetime.datetime.now().timestamp()
    bot.register_next_step_handler(msg, block_handler, right)


def block_handler(msg: Message, side: str):
    final = datetime.datetime.now().timestamp()
    player = db.read_obj("user_id", msg.chat.id)
    if final - temp[msg.chat.id]["block_start"] > player.dmg / 5 or side != msg.text:
        bot.send_message(msg.chat.id, "–¢–≤–æ—è —Ä–µ–∞–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–∞! –¢—ã –Ω–µ –≥–æ—Ç–æ–≤!")
        time.sleep(5)
        menu(msg)
        return

    bot.send_message(msg.chat.id, "–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!")
    block(msg)


def is_new_player(m: Message):
    result = db.read_all()
    for user in result:
        if user[0] == m.chat.id:
            return False
    return True


def reg_1(m: Message):
    txt = ("–ü—Ä–∏–≤–µ—Ç, %s. –í —ç—Ç–æ–π –∏–≥—Ä–µ —Ç—ã –æ—Ç—Ä–∏–Ω–µ—à—å —Å–≤–æ—é —Å—É—â–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–Ω–µ—à—å –Ω–∞—Å—Ç–æ—è—â–∏–º –º–∞–≥–æ–º üßô‚Äç‚ôÇÔ∏è. –ú–∏—Ä –Ω–∞ –ø–æ—Ä–æ–≥–µ "
           "—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è: –Ω–∞—Ä–æ–¥ –æ–≥–Ω—è üî• —Ä–∞–∑–≤—è–∑–∞–ª –≤–æ–π–Ω—É –∏ —Ç–µ–ø–µ—Ä—å –≤—Å–µ –ø—ã—Ç–∞—é—Ç—Å—è –ø–æ–º–µ—à–∞—Ç—å –∏–º. –ò–º–µ–Ω–Ω–æ —Ç—ã —Å—Ç–∞–Ω–µ—à—å —Ç–µ–º, "
           "–∫—Ç–æ —Å–ø–∞—Å—ë—Ç —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ ‚öîÔ∏è!\n–Ø –≤–µ—Ä—é –≤ —Ç–µ–±—è!\n\n–ö–∞–∫ —Ç–≤–æ—ë –∏–º—è, —É—á–µ–Ω–∏–∫?")
    bot.send_message(m.chat.id, text=txt % m.from_user.first_name)
    bot.register_next_step_handler(m, reg_2)


def reg_2(m: Message):
    temp[m.chat.id]["nick"] = m.text
    kb = types.ReplyKeyboardMarkup(True, True)
    kb.row("–í–æ–¥–∞", "–í–æ–∑–¥—É—Ö")
    kb.row("–ú–µ—Ç–∞–ª–ª", "–ó–µ–º–ª—è")
    kb.row("–û–≥–æ–Ω—å", "–î–µ—Ä–µ–≤–æ")
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ —Å—Ç–∏—Ö–∏—é:", reply_markup=kb)
    bot.register_next_step_handler(m, reg_3)


def reg_3(m: Message):
    temp[m.chat.id]["power"] = m.text
    hp, dmg = powers[m.text]
    db.write([m.chat.id, temp[m.chat.id]["nick"], temp[m.chat.id]["power"], hp, dmg, 1, 0])
    heals.write([m.chat.id, {}])
    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    bot.send_message(m.chat.id, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ...")
    time.sleep(2)
    menu(m)


def reg_4(m: Message):
    if m.text == "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞":
        workout(m)
    if m.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–ª—ã":
        exam(m)


def reg_5(m: Message):
    if m.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –•–ü":
        eat(m)
    if m.text == "–ü–µ—Ä–µ–¥–æ—Ö–Ω—É—Ç—å":
        sleep(m)


def reg_6(m: Message):
    if m.text == "–û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        stats(m)


bot.infinity_polling()
